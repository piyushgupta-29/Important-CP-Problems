// Question:
// JS newbie "A" wants to learn React from "B" and wants 
// to kow in his network who can introduce him to B in 
// the shortest time period.

//Input:
// 4
// 2
// 5
// 7
// 9
// 4
// 2 9 2
// 7 2 3
// 7 9 7
// 9 5 1
// 7
// 9

//Output:
//5

import java.io.*;
import java.util.*;

import sun.net.www.content.text.plain;

class TestClass {
    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        
        
        int n = Integer.parseInt(br.readLine());
        int[] members = new int[n];
        for(int i=0; i < n ; i++) 
            members[i] = Integer.parseInt(br.readLine());
            
        int e = Integer.parseInt(br.readLine());
        int[][] fF = new int[e][];
        for(int i=0; i < e; i++)
        {
            fF[i] = Arrays.stream(br.readLine().split("\\s+")).mapToInt
            (Integer::parseInt).toArray();
        }
        
        int A = Integer.parseInt(br.readLine());
        int B = Integer.parseInt(br.readLine());
        
        HashMap<Integer, Integer> hmap = new HashMap<Integer, Integer>()
        {{
            for (int i = 0; i < n; i++)
            {
                putIfAbsent(members[i],i);
            }
        }};
        
        int src = hmap.get(A);
        int dest = hmap.get(B);
        Graph g = new Graph(n);
        for(int[] edge :fF) 
        {
            int u = hmap.get(edge[0]);
            int v = hmap.get(edge[1]);
            g.addEdge(u,v);
        }
        bw.write((g.DFS(src,dest) ? 1:0) + "\n");
        bw.flush();
    }
}

class Graph
{
    private int V;
    private List<Integer>[] adj;
    @SuppressWarnings("unchecked")
    Graph(int V)
    {
        this.V = V;
        this.adj = new List[V];
        for (int i = 0; i < V ; i++)
        {
            this.adj[i] = new LinkedList<>();
        }
    }
    
    public void addEdge(int src, int dest) 
    {
        this.adj[src].add(dest);
    }
        
    public boolean DFS(int src, int dest) {
        if(src==dest) return true;
        boolean[] vis = new boolean[V];
        vis[src] = true;

        for (int neigh:this.adj[src]) {
            if(!vis[neigh]&&dfsUtil(neigh,dest,vis)) {
                return true;
            }
        }
        return false;
    }

    private boolean dfsUtil(int src,int dest,boolean[] vis){
        if(src==dest) return true;
        vis[src]=true;

        for(int neigh:this.adj[src]){
            if(!vis[neigh]&&dfsUtil(neigh,dest,vis)){
                return true;
            }
        }
        return false;
    }
}
