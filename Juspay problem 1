// Question:
// Given a maze with N cells. Each cell may have multiple entry points but not more than one exit(i.e entry/exit points are unidirectional doors like valves).
// You are given an array Edge[] of N integers, where Edge[i] contains the cell number that can be reached from of cell i in one step. Edge[i] is -1 if the ith cell doesn't have an exit. 
// The task is to find the largest sum of a cycle in the maze(Sum of a cycle is the sum of the cell indexes of all cells present in that cycle).

Note:The cells are named with an integer value from 0 to N-1. If there is no cycle in the graph then return -1.

#include<bits/stdc++.h>
using namespace std;

class Solution
{
    public:
        long long largestcycle=-1;
    void DFS(int node,vector<int> &Edge,bool visited[],bool pathvisited[])
    {
        visited[node]=true;
        pathvisited[node]=true;
        
        if(Edge[node]!=-1)
        {
            int adj=Edge[node];
            if(!visited[adj])
            {
                DFS(adj,Edge,visited,pathvisited);
            }
            else if(pathvisited[adj])
            {
                int curr=adj;
                long long sum=0;
                do
                {
                    sum+=curr;
                    curr=Edge[curr];
                }while(curr!=adj);
                largestcycle=max(largestcycle,sum);
            }
        }
        pathvisited[node]=false;
    }
    long long largestSumCycle(int N,vector<int> Edge)
    {
        bool visited[N]={0};
        bool pathvisited[N]={0};
        for(int i=0;i<N;i++)
        {
            if(!visited[i])
            {
                DFS(i,Edge,visited,pathvisited);
            }
        }
        return largestcycle;
    }
};

int main()
{
    int tc;
    cin>>tc;
    while(tc--){
        int N;
        cin>>N;
        vector<int> Edge(N);
        for(int i=0;i<N;i++)
        {
            cin>>Edge[i];
        }
        Solution obj;
        long long ans=obj.largestSumCycle(N,Edge);
        cout<<ans<<endl;
    }
    return 0;
}
