#The number of times a number x appears in n! is 
i=1;ans=0;
while(n/pow(x,i)>0)
{
    ans+=n/pow(x,i);
    i++;
}
i.e x appears in n! n/x^1+n/x^2.... times
e.g 2 appears in 5! 5/2+5/4+5/8...=2+1+0+0..=3times

#The number of numbers i such that n/i gives a fixed integer value x are:
[(n+x+1)/(x+1)...(n/x)]
Proof:
n/i>=x     ...(1)
n/i<x+1    ...(2)
n/x>=i     ...(3)(from eq(1))
n+1<=i*(x+1)  (from eq(2))
(n/(x+1))+1<=i  i.e (n+x+1)/(x+1)<=i...(4)
Therefore form eq(3) and (4) we get the range[(n+x+1)/(x+1)...(n/x)]
eg.(Permutation Restoration-1900 Codeforces)

#If you take modulo of a number n with any number,n reduces by more than n/2.

#Property of floor function: Suppose floor value of n/x=i,then i<=n/x<i+1.

#To run a multinode BFS, just add those multiple nodes in the queue at the beginning
and then run a normal BFS.

#For query question, you do not need to answer the queries in the given order,i.e you can sort the queries.

#If dfs or bfs is not possible for graph, go for dsu by 

#When you cannot decide the root of the tree as dfs from every node can be an optimal answer,
then fix the root and then calculate the answer for other nodes.
e.g.Choosing Capital for Treeland
