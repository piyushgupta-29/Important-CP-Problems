// Question:
// Given a maze with N cells. Each cell may have multiple entry points but not more than one exit(i.e entry/exit points are unidirectional doors like valves).
// You are given an array Edge[] of N integers, where Edge[i] contains the cell number that can be reached from of cell i in one step. Edge[i] is -1 if the ith cell doesn't have an exit. 
// Find the nearest meeting cell of given two cells 

// Input:
// 1
// 23
// 4 4 1 4 13 8 8 8 0 8 14 9 15 11 -1 10 15 22 22 22 22 22 21 
// 9 2

// Output:
// 4

#include<bits/stdc++.h>
using namespace std;
 
#define boost ios_base::sync_with_stdio(false);cin.tie(NULL)
#define endl "\n"
#define ll long long int
#define mod 1000000007
#define vll vector<ll>
#define vvll vector<vll>
#define pb push_back
#define mll map<ll,ll>
#define pll pair<ll,ll>
#define N 1000005

int main()
{
    boost;
    ll t,n,i,x,y,j,k,m,p,q,mn,mx,cnt,sum,ans;
    cin>>t;
    while(t--)
    {
        sum=0;cnt=0;ans=0;mn=1e18;mx=INT_MIN;
        cin>>n;
        vll edge(n);
        for(i=0;i<n;i++) cin>>edge[i];
        vvll a(n);
        for(i=0;i<n;i++)
        {
            if(edge[i]==-1) continue; 
            a[edge[i]].pb(i);
        }
        for(i=0;i<n;i++)
        {
            sum=0;
            for(auto it:a[i]) 
                sum+=it;
            if(sum>mx)
            {
                mx=sum;
                ans=i;
            }
        }
        cout<<ans<<endl;
    }
}
