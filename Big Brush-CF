#include <iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>
#include <queue>
#include <deque>
#include <bitset>
#include <iterator>
#include <list>
#include <stack>
#include <map>
#include <set>
#include <functional>
#include <numeric>
#include <utility>
#include <limits>
#include <time.h>
#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <climits>
#include <unordered_set>
#include <unordered_map>
#include <ext/pb_ds/assoc_container.hpp>
 
using namespace std;
using namespace __gnu_pbds;
 
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
 
#define MEM(a, b) memset(a, (b), sizeof(a))
#define FOR(i, j, k, in) for (int i=j ; i<k ; i+=in)
#define RFOR(i, j, k, in) for (int i=j ; i>=k ; i-=in)
#define REP(i, j) FOR(i, 0, j, 1)
#define RREP(i, j) RFOR(i, j, 0, 1)
#define all(cont) cont.begin(), cont.end()
#define rall(cont) cont.rbegin(), cont.rend()
#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)
#define IN(A, B, C) assert( B <= A && A <= C)
#define MP make_pair
#define PB push_back
#define F first
#define S second
#define INF (int)1e9
#define EPS 1e-9
#define PI 3.1415926535897932384626433832795
#define MOD 1000000007
#define nl '\n'
#define read(type) readInt<type>()
const double pi=acos(-1.0);
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<string> VS;
typedef vector<PII> VII;
typedef vector<VI> VVI;
typedef map<int,int> MPII;
typedef set<int> SETI;
typedef multiset<int> MSETI;
typedef long int int32;
typedef unsigned long int uint32;
typedef long long int int64;
typedef unsigned long long int  uint64;
// typedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef tree<int,null_type,less_equal<int>,rb_tree_tag, tree_order_statistics_node_update> ordered_set;

int add(int a, int b)
{
    a %= MOD;
    b %= MOD;
    int res = a + b;
    if(res >= MOD)
        return res - MOD;
    return res;
}

int mult(int a, int b)
{
    a %= MOD;
    b %= MOD;
    long long res = a;
    res *= b;
    if(res >= MOD)
        return res % MOD;
    return res;
}

long long binpow(long long a, long long b) {
    long long res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a;
        a = a * a;
        b >>= 1;
    }
    return res;
}

void solve()
{
    int n, m;
    cin >> n >> m;

    int a[n][m];
    REP(i, n)
        REP(j, m)
            cin >> a[i][j];
    
    int p = 0;
    queue<pair<pair<int, int>, int>> q;
    set<pair<int, int>> done;
    REP(i, n-1)
        REP(j, m-1)
            if (a[i][j] == a[i+1][j+1] && a[i+1][j] == a[i][j+1] && a[i+1][j] == a[i+1][j+1])
            {
                ++p;
                q.push({{i, j}, a[i][j]});
                done.insert({i, j});
            }
    
    vector<pair<pair<int, int>, int>> ans;
    while (!q.empty())
    {
        ans.PB(q.front());
        auto pos = q.front().F;
        int i = pos.F, j = pos.S;
        q.pop();

        a[i][j] = 0;
        a[i][j+1] = 0;
        a[i+1][j] = 0;
        a[i+1][j+1] = 0;

        pair<int, int> neigh[] = {
            {i-1, j-1},
            {i-1, j},
            {i-1, j+1},
            {i, j-1},
            {i, j+1},
            {i+1, j-1},
            {i+1, j},
            {i+1, j+1}
        };
        for (auto next: neigh)
        {
            if (next.F == -1 || next.F == n-1 || next.S == -1 || next.S == m-1 || done.find(next) != done.end())
                continue;
            
            set<int> k;
            if (a[next.F][next.S])
                k.insert(a[next.F][next.S]);
            if (a[next.F][next.S+1])
                k.insert(a[next.F][next.S+1]);
            if (a[next.F+1][next.S])
                k.insert(a[next.F+1][next.S]);
            if (a[next.F+1][next.S+1])
                k.insert(a[next.F+1][next.S+1]);
            
            if (k.size() == 1)
            {
                ++p;
                q.push({next, *k.begin()});
                done.insert(next);
            }
        }
    }

    if (p == (n-1)*(m-1))
    {
        reverse(all(ans));
        cout << ans.size() << nl;
        for (auto x: ans)
            cout << x.F.F+1 << ' ' << x.F.S+1 << ' ' << x.S << nl;
    }
    else
        cout << -1;
}

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    #ifndef ONLINE_JUDGE
        freopen("../input.txt", "r", stdin);
        freopen("../output.txt", "w", stdout);
    #endif

    int t = 1;
    // cin >> t;
 
    while(t--)
    {
        solve();
        cout << nl;
    }
 
    return 0;
}
